#!/usr/bin/env ruby
require 'rubygems'
require 'dotenv'
require 'jsone'
require 'jsone/version'
require 'jsone/commander_ext'
require 'jsone/cli'
require 'commander/import'

Dotenv.load

program :version, JSONe::VERSION
program :description, 'jsone - JSON encrypted'
program :help_formatter, :compact

verbose = 0
global_option('-v', '--verbose', 'Be verbose') do
  verbose += 1
  JSONe.verbose = verbose
end

global_option('-r DIR', '--root DIR', 'Load .env from DIR/.env') do |dir|
  path = "#{dir}/.env"
  raise ArgumentError, "#{path}: no such file" unless File.exist?(path)
  Dotenv.load(path)
end

global_option('-1', '--stdout', 'Print result on stdout')

def check_args!(cmd, args, needed)
  return unless args.size < needed
  puts "#{cmd}: command needs at least #{needed} argument(s)"
  exit 1
end

command :keygen do |c|
  c.syntax = 'jsone keygen SURVEY'
  c.summary = 'Generate key pair'
  c.option '--env', 'Add generated key to .env'
  c.action do |args, options|
    check_args! :keygen, args, 0
    key = JSONe.gen_key

    if options.stdout
      JSONe.print_key(key)
    else
      path = JSONe.write_key(key)
      puts "Key pair has been saved to #{path}"
      if options.env
        if File.exist?('.env')
          body = File.read('.env')
          body << "\nJSONE_KEY=#{JSONe.to_hex(key.public_key)}\n"
          File.write('.env', body)
        else
          puts ".env - no such file, create one manually with:\n\n   JSONE_KEY=#{JSONe.to_hex(key.public_key)}\n\n"
        end
      else
        puts "You may want to add:\n\n   JSONE_KEY=#{JSONe.to_hex(key.public_key)}\n   export JSONE_KEY\n\nto your environment for convenience.\n"
      end
    end
  end
end

command :encrypt do |c|
  c.syntax = 'jsone encrypt FILE...'
  c.summary = 'Encrypts FILE with '
  c.option '--key KEY', "Use KEY (default is #{ENV['JSONE_KEY']}"
  c.option '--force', 'Force re-encryption already encrypted files'
  c.option '--ifnewer', 'Skip already encrypted files and their mtime is greater than original'
  c.action do |args, options|
    check_args! :encrypt, args, 0

    key = JSONe::Cli.get_key(options.key)
    JSONe::Cli.process_args(args, '.json') do |path|
      if options.ifnewer && File.exist?("#{path}e") && File.mtime("#{path}e") > File.mtime(path)
        puts "jsone: #{path}: skipped" if options.verbose
        next
      end
      JSONe::Cli.encrypt_file(path, key, force: options.force, output: options.stdout ? STDOUT : nil)
    end
  end
end

command :decrypt do |c|
  c.syntax = 'jsone decrypt FILE...'
  c.summary = 'Decrypt FILE with '
  c.action do |args, options|
    check_args! :decrypt, args, 0
    JSONe::Cli.process_args(args, JSONe::ENCRYPTED_EXTENSION) do |path|
      JSONe::Cli.decrypt_file(path, output: options.stdout ? STDOUT : nil, force: false)
    end
  end
end

command :diff do |c|
  c.syntax = 'jsone diff FILE'
  c.summary = 'Display differences with FILE and it\'s encrypted content (if exists)'
  c.action do |args, options|
    check_args! :diff, args, 0
    key = JSONe::Cli.get_key(options.key)

    path = args.first
    raise ArgumentError, "#{path}: no such file" unless File.exist?(path)
    raise ArgumentError, "#{path}: need .json" unless File.extname(path) == '.json'

    exit(1) if JSONe::Cli.diff_file(path, key)
  end
end

alias_command :e, :encrypt
alias_command :d, :decrypt
